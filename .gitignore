*.tif
% load mat files into a cell array
clear all
inputfold = './CS HeatMaps';
myfiles = dir(fullfile(inputfold,'*.mat'));
numfiles = length(myfiles);
clear data
for ii =1:numfiles
    data(ii).name = myfiles(ii).name;
    load(fullfile(inputfold,myfiles(ii).name));
    data(ii).siz = size(heatIm);
    data(ii).heatIm = heatIm;
    data(ii).heatVec = heatIm(:);
    data(ii).ontIm = ontIm;
    clear heatIm ontIm
end
%%
names = {data(:).name};
for ii=1:numfiles
    tmp = names{ii}(1:end-4);
    names{ii} = [tmp(end),tmp(3:6)];
end
%%
inX = double([data.heatVec]);
dims = data(1).siz;
[aa,bb,cc] = ndgrid(1:dims(1),1:dims(2),1:dims(3));
subs = [aa(:),bb(:),cc(:)];
%%
valinds = any(inX,2);
XX = zeros([size(subs)+[0 1],numfiles]);
for ii=1:numfiles
    XX(:,1,ii) = inX(:,ii);
    XX(:,2:end,ii) = subs;
end
inX_ = inX(valinds,:);
XX = XX(valinds,:,:);
XXori = XX;
%%
NumCluster=12;
[pD_,Z]=vizIntensityBased(inX_,names,NumCluster);

%% normalize XX
XX=XXori;
meanXX = mean(mean(XX,1),3);
XX2 = reshape(permute(XX,[2 1 3]),size(XX,2),[])';
stdXX = std(XX2);
XX = (XX-meanXX);
XX = XX./stdXX;
NumCluster=25;
vizIntensityBased(XX,names,NumCluster)
%% MDScale
Y = pdArr(XX);
dissimilarities_multi = max(Y,Y');
dissimilarities_single = squareform(pD_);
%%
[Y,stress,disparities] = mdscale(dissimilarities,2);
[Y,stress,disparities] = mdscale(dissimilarities,2);
%%
[NUM,TXT,RAW]=xlsread('./list.xlsx');
clear somanames
for ii=1:length(names)
    ix1 = find(contains({TXT{:,1}},names{ii}(2:end)));
    somanames{ii}=TXT{ix1,2};
end
% {TXT{:,2}}
%%
dx = 0.002; dy = -0.002; % displacement so the text does not overlay the data points
figure, 
scatter(Y(:,1),Y(:,2))
% text(Y(:,1)+dx, Y(:,2)+dy, names);
text(Y(:,1)+dx, Y(:,2)+dy, somanames);

%% NN
start = tic;
clear net
net = selforgmap([3 3]);
net.trainParam.epochs= 300;
vecXX = reshape(XX,[],size(XX,3));
net = train(net,vecXX);
sprintf('Training ends in: %d',toc(start))
y = net(vecXX);
classes = vec2ind(y);
% mkdir('test')
% save(sprintf('./test/classes3D_sub%s',test{1}),'classes','net')
outputs = nncalc.y(net,{inX_});
outputs = outputs{1};
% dims = data(1).siz
% hits = sum(outputs,2);
% norm_hits = sqrt(hits/max(hits));
% [~,back] = max(hits);
% label = zeros(data(ii).siz,'uint8');
% label(inds) = classes;
% label(label==back) = 0;
%%

% set(H,'LineWidth',2)
%%

c = cluster(Z,'maxclust',4);

names{c==4}
figure
dendrogram(Z)

%%
I = inconsistent(Z)
T = cluster(Z,'cutoff',1.2)

%%
idx = kmeans(inX_',25,'Distance','cosine')

%%
%%








function [pD_,Z]=vizIntensityBased(inX_,names,NumCluster)
%%
% NumCluster =8;
% Z = linkage(Y);
numfiles = size(inX_,2);
% Z = linkage(inX_','complete','cosine');
% pD = squareform(pdist(inX_','cosine'));
% binMatch = pdist(inX_', @distfun);
if ndims(inX_)>2
    pD = pdArr(inX_);
else
    mydist = @(Xi,Xj) distfun(Xi,Xj,'jaccard')
    binMatch = pdist2(inX_',inX_', @(Xi,Xj) mydist );
    pD = binMatch;
    pD = 1-pD/max(pD(:));
    pD = pD.*double(1-eye(numfiles));
end
%%
% pD(pD>.99)=1;
if nargin<3
    [aa,bb,cc]=find(1-pD);
    A = sparse(aa,bb,1,numfiles,numfiles);
    A=max(A',A);
    [S,C] = graphconncomp(A);
    NumCluster=S;
end
%%
pD_=pD(find(triu(pD,1)'));
Z = linkage(pD_','complete');
% color = Z(end-NumCluster+2,3)-eps;
color = Z(end-NumCluster+1,3);
% color = Z(find(Z(:,3)==max(Z(:,3)),1)-NumCluster+2,3)-eps;
NumCluster = sum(Z(:,3)>color);
[NumCluster,color]

figure(100)
cla
H = dendrogram(Z,numfiles,'ColorThreshold',color,'labels',names);
set(gca,'xticklabelrotation',90);
% set(gca,'fontsize',6);
%%
if 0
    [ix1,ix2]=find(min(setdiff(unique(sort(pD(:))),diag(pD)))==pD,1);
    tag1 = 'n0118'
    tag2 = 'x0283'
    ix1 = find(contains(names,tag1));
    ix2 = find(contains(names,tag2));
    
    % tag1 = names{ix1};
    % tag2 = names{ix2};
    Index1 = find(contains(xticklabels,tag1));
    Index2 = find(contains(xticklabels,tag2));
    %
    % pD(Index2,Index1)
    length(find(inX_(:,ix1)>0&inX_(:,ix2)>0))
    % get the current tick labeks
    ticklabels = get(gca,'XTickLabel');
    set(gca, 'XTickLabel', ticklabels);
    % prepend a color for each tick label
    ticklabels_new = cell(size(ticklabels));
    for i = 1:length(ticklabels)
        if any(i==[Index1,Index2])
            ticklabels_new{i} = ['\color{red} ' ticklabels{i}];
        else
            ticklabels_new{i} = ['\color{blue} ' ticklabels{i}];
        end
    end
    % set the tick labels
    set(gca, 'XTickLabel', ticklabels_new);
end
